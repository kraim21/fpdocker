services:
  backend:
    build:
      context: ..
      dockerfile: ./fpdocker/Dockerfile.prod
      target: backend-prod
    container_name: fresh-price-backend
    env_file:
    - ../fresh-price-backend/.env
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    networks:
      - node-network
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NODE_ENV=production
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    depends_on:
      - postgres

  postgres:
    image: postgres:14
    container_name: fresh-price-postgres
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - node-network
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - postgres-logs:/var/log/postgresql
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost -p ${POSTGRES_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    build:
      context: ..
      dockerfile: ./fpdocker/Dockerfile.prod
      target: frontend-prod
    container_name: fresh-price-nginx
    ports:
      - "${NGINX_PORT}:80"
    networks:
      - node-network
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
    restart: always

networks:
  node-network:
    driver: bridge

volumes:
  postgres-data:
  postgres-logs:
  node_modules: